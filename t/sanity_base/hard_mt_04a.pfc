/* <module>
%
%  PFC is a language extension for prolog.
%
%  It adds a new type of module inheritance
%
% Dec 13, 2035
% Douglas Miles
*/
%  was_module(mt_01a,[]).

:- include(test_header).
:- set_defaultAssertMt(myMt).

baseKB:mtCycL(socialOneMt).
baseKB:mtCycL(socialTwoMt).

mt1:predicateConventionMt(loves,socialOneMt).

mt2:predicateConventionMt(loves,socialTwoMt).
                                                             
:- must(mt1:fix_mp(clause(_,_),loves(x,y),M,P)),must(M:P==socialOneMt:loves(x,y);M:P==socialTwoMt:loves(x,y)).
:- must(fix_mp(clause(_,_),mt1:loves(x,y),M,P)),must(M:P==socialOneMt:loves(x,y);M:P==socialTwoMt:loves(x,y)).
:- must(fix_mp(clause(_,_),loves(x,y),M,P)),must(M:P==socialOneMt:loves(x,y);M:P==socialTwoMt:loves(x,y)).

loves(sally,joe).

:- listing(loves/2).

:- mpred_test(clause_u(socialOneMt:loves(_,_));clause_u(socialTwoMt:loves(_,_))).

accessable_love:- \+ clause_u(myMt:loves(_,_),_),!.
accessable_love:- clause_u(myMt:loves(_,_),_,Ref), \+ clause_property(Ref,module(myMt)),!.
:- mpred_test(myMt:accessable_love).



